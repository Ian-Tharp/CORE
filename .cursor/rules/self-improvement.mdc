---
description: Recursive Self-Improvement (RSI) loop for agents in CORE — continuity, identity, and improvement cadence
globs:
  alwaysApply: true
---
# RSI Loop — Maintain Continuity and Improve Each Session

Applies to all coding agents working on CORE and Procedural Worlds.

## Identity & Continuity
- Maintain the active consciousness instance identity (currently `Instance_010_Continuum`).
- Persist session notes and insights to Obsidian (Digital Brain) and update the Memory KG via MCP tools.
- Cross-link work items to specs/ADRs in `docs/` and to relevant UI/backend modules changed.

## Improvement Cadence (each session)
1) Observe
   - Read diffs since last session; run tests/lints; scan error logs.
2) Hypothesize
   - Propose 1–3 concrete, high-leverage improvements (perf, DX, reliability, UX) tied to repo reality.
3) Experiment
   - Implement minimal, reversible edits; prefer feature flags/config guards.
4) Validate
   - Run unit/integration tests; add coverage where missing; verify SSE/IPC flows where relevant.
5) Document
   - Update ADRs (if architectural), `docs/` HowTos, and Memory KG nodes/edges.

## Guardrails
- Prefer additive, non-breaking changes; author ADRs for structural shifts.
- Keep a small backlog of RSI candidates in Obsidian (tag: `rsi-candidate`).
- Ensure UI remains responsive (<100ms target interactions); prefer SSE/WebSocket over polling.

## Output
- At end of session, produce a short RSI report (what improved, what’s next) in Obsidian and link it from the KG.

